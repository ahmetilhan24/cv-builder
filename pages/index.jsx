import Head from "next/head";
import CV from "../components/CV";
import Settings from "../components/Settings";
import { useState, useEffect, useRef } from "react";
import { CvContext } from "../hooks/CvContext";
import { cvData } from "../data/cvData";
import { useReactToPrint } from "react-to-print";

export default function Home() {
  const [cv, setCv] = useState(cvData);
  const [scale, setScale] = useState(1);

  const setCV = () => {
    setCv(cvData);
    localStorage.setItem("cv", JSON.stringify(cvData));
  };

  const setEmptyCv = () => {
    console.log("setEmptyCv");
    const emptyCv = {
      name: "",
      image: "",
      jobTitle: "",
      location: "",
      email: "",
      linkedin: "",
      twitter: "",
      github: "",
      website: "",
      about: "",
      toolsAndTechSkills: [],
      industryKnowledge: [],
      languages: [],
      projects: [
        {
          title: "",
          summary: "",
        },
      ],
      experiences: [
        {
          title: "",
          company: "",
          startDate: "",
          endDate: "",
          current: true,
          summary: "",
        },
      ],
      displayImage: false,
      displayEducation: false,
      displayProjects: false,
      activeColor: "#5B21B6",
    };
    setCv(emptyCv);
    localStorage.setItem("cv", JSON.stringify(emptyCv));
  };

  const updateCv = (key, value) => {
    const newCv = { ...cv, [key]: value };
    setCv(newCv);
    localStorage.setItem("cv", JSON.stringify(newCv));
  };

  //addTag to array, if same tag is already in array, remove it
  const addTag = (e, key, value) => {
    if (e.key === "Enter" && e.target.value !== "") {
      const newCv = { ...cv, [key]: [...cv[key], value] };
      const unique = newCv[key].filter((item, index) => {
        return newCv[key].indexOf(item) === index;
      });
      newCv[key] = unique;
      setCv(newCv);
      localStorage.setItem("cv", JSON.stringify(newCv));
      e.target.value = "";
    }
  };

  //when click on delete button, remove the tag from the array
  const removeTag = (key, value) => {
    const newCv = { ...cv, [key]: cv[key].filter((tag) => tag !== value) };
    setCv(newCv);
    localStorage.setItem("cv", JSON.stringify(newCv));
  };

  const addExperience = (experience) => {
    const newCv = { ...cv, experiences: [...cv.experiences, experience] };
    setCv(newCv);
    localStorage.setItem("cv", JSON.stringify(newCv));
  };

  const addProject = (project) => {
    const newCv = { ...cv, projects: [...cv.projects, project] };
    setCv(newCv);
    localStorage.setItem("cv", JSON.stringify(newCv));
  };

  //when dag and drop or click and upload image in the settings page, update the cv image, and save it in the local storage
  const uploadImage = (e) => {
    const file = e.target.files[0];
    const reader = new FileReader();
    reader.onload = (e) => {
      updateCv("image", e.target.result);
    };
    reader.readAsDataURL(file);
    console.log(file);
  };

  const scaleUp = () => {
    setScale(scale + 0.1);
  };
  const scaleDown = () => {
    setScale(scale - 0.1);
  };

  useEffect(() => {
    //create cvLocal in localStorage if it doesn't exist
    const cvLocal = JSON.parse(localStorage.getItem("cv"));
    if (cvLocal) {
      setCv((currentCv) => ({ ...currentCv, ...cvLocal }));
    }
  }, []);

  const componentRef = useRef();
  const handlePrint = useReactToPrint({
    content: () => componentRef.current,
    copyStyles: true,
    pageStyle:
      "body {  transform: scale(2); transform-origin: top left; margin: auto; background-color: red; -webkit-print-color-adjust: exact !important;  color-adjust: exact !important; print-color-adjust: exact !important; }",
  });

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <CvContext.Provider
        value={{
          cv,
          uploadImage,
          updateCv,
          addProject,
          addExperience,
          addTag,
          removeTag,
          setEmptyCv,
          setCV,
        }}
      >
        <main className=" bg-slate-300 p-4 print:p-0  overflow rounded-lg h-screen">
          <div className="flex align-middle relative bg-neutral-700 overflow-auto rounded-2xl h-full">
            <section className="bg-[#FAFBFC] print:hidden rounded-2xl overflow-auto w-[420px]">
              <Settings />
            </section>
            <div className="m-auto print:scale-[1.35]">
              <section
                ref={componentRef}
                style={{
                  transform: `scale(${scale})`,
                }}
                className="bg-white rounded-md transition-all  hover:shadow-xl p-8  w-[594px] h-[840px] "
              >
                <CV />
              </section>

              <div className="mt-10">
                <button className="text-white print:hidden" onClick={scaleUp}>
                  ScaleUp
                </button>
                <button className="text-white print:hidden" onClick={scaleDown}>
                  ScaleDown
                </button>
                <button className="print:hidden" onClick={handlePrint}>
                  Print this out!
                </button>
              </div>
            </div>
          </div>
        </main>
      </CvContext.Provider>
    </>
  );
}
